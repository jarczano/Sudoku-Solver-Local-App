import numpy as np
import unittest
import sudoku
from sudoku import Sudoku


class TestSudoku(unittest.TestCase):

    def test_sudoku_solve(self):
        board1 = np.array([
            [0, 2, 0, 0, 0, 0, 0, 0, 8],
            [0, 0, 5, 7, 1, 0, 6, 0, 0],
            [0, 3, 6, 4, 0, 2, 0, 0, 0],
            [0, 0, 7, 0, 0, 1, 0, 0, 0],
            [0, 5, 0, 0, 0, 0, 2, 1, 0],
            [0, 0, 0, 3, 2, 0, 0, 8, 5],
            [4, 7, 0, 0, 0, 0, 0, 0, 3],
            [1, 9, 0, 2, 0, 5, 8, 6, 7],
            [5, 6, 0, 9, 7, 3, 4, 2, 0]])

        board1_solved = np.array(
            [[7, 2, 1, 6, 3, 9, 5, 4, 8],
             [9, 4, 5, 7, 1, 8, 6, 3, 2],
             [8, 3, 6, 4, 5, 2, 1, 7, 9],
             [2, 8, 7, 5, 6, 1, 3, 9, 4],
             [3, 5, 4, 8, 9, 7, 2, 1, 6],
             [6, 1, 9, 3, 2, 4, 7, 8, 5],
             [4, 7, 2, 1, 8, 6, 9, 5, 3],
             [1, 9, 3, 2, 4, 5, 8, 6, 7],
             [5, 6, 8, 9, 7, 3, 4, 2, 1]])

        board2 = np.array([
            [0, 7, 0, 0, 9, 0, 0, 1, 6],
            [0, 0, 6, 0, 0, 0, 8, 0, 0],
            [0, 0, 0, 1, 0, 0, 3, 0, 0],
            [0, 9, 0, 0, 0, 5, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 6, 0, 0],
            [0, 0, 7, 8, 0, 0, 0, 4, 2],
            [4, 0, 0, 0, 8, 0, 0, 0, 0],
            [0, 0, 2, 4, 0, 0, 0, 7, 1],
            [0, 0, 0, 0, 0, 0, 0, 3, 0]])

        board2_solved = np.array(
            [[2, 7, 8, 3, 9, 4, 5, 1, 6],
             [3, 1, 6, 5, 7, 2, 8, 9, 4],
             [9, 4, 5, 1, 6, 8, 3, 2, 7],
             [1, 9, 4, 6, 2, 5, 7, 8, 3],
             [8, 2, 3, 7, 4, 1, 6, 5, 9],
             [5, 6, 7, 8, 3, 9, 1, 4, 2],
             [4, 3, 1, 9, 8, 7, 2, 6, 5],
             [6, 8, 2, 4, 5, 3, 9, 7, 1],
             [7, 5, 9, 2, 1, 6, 4, 3, 8]])

        board3 = np.array([
            [0, 6, 0, 0, 0, 0, 0, 0, 4],
            [0, 5, 0, 0, 6, 1, 0, 8, 0],
            [0, 1, 0, 0, 9, 0, 0, 0, 3],
            [2, 0, 0, 0, 8, 0, 0, 0, 7],
            [0, 0, 0, 6, 0, 4, 0, 0, 0],
            [9, 0, 0, 7, 0, 0, 0, 4, 0],
            [0, 9, 0, 0, 7, 0, 5, 0, 0],
            [3, 0, 0, 0, 1, 0, 0, 0, 8],
            [0, 0, 0, 0, 0, 0, 0, 0, 0]])

        board3_solved = np.array(
            [[8, 6, 9, 2, 5, 3, 1, 7, 4],
             [7, 5, 3, 4, 6, 1, 2, 8, 9],
             [4, 1, 2, 8, 9, 7, 6, 5, 3],
             [2, 4, 5, 1, 8, 9, 3, 6, 7],
             [1, 7, 8, 6, 3, 4, 9, 2, 5],
             [9, 3, 6, 7, 2, 5, 8, 4, 1],
             [6, 9, 4, 3, 7, 8, 5, 1, 2],
             [3, 2, 7, 5, 1, 6, 4, 9, 8],
             [5, 8, 1, 9, 4, 2, 7, 3, 6]])

        sudoku1 = Sudoku(board1)
        assert (sudoku1.solve(sudoku1) == board1_solved).all()

        sudoku2 = Sudoku(board2)
        assert (sudoku2.solve(sudoku2) == board2_solved).all()

        sudoku3 = Sudoku(board3)
        assert (sudoku3.solve(sudoku3) == board3_solved).all()


if __name__ == '__main__':
    unittest.main()
